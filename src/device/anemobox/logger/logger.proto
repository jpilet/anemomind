// The anemomind logging file format.
//
// the format is compact because:
// - time and values are delta-coded
// - most values are coded with integers, with a variable number of bytes
// - values are "packed" (see protobuf doc)
// - the result is gzipped.

package sail;

message AngleValueSet {
  // Unit: 1/100 degree.
  // The first entry contains the full angle.
  // The other entries contain delta with previous.
  repeated int32 deltaAngle = 1 [packed = true];
}

message VelocityValueSet {
  // Unit: 1/100 knots
  repeated int32 deltaVelocity = 1 [packed = true];
}

message AngularVelocityValueSet {
  // Unit: 1/1000 rad / sec
  // 1 rpm = 104.719755 * 1e-3 rad / sec
  repeated int32 delta = 1 [packed = true];
}

message LengthValueSet {
  // Unit: meters
  repeated int32 deltaLength = 1 [packed = true];
}

message GeoPosValueSet {
  // Unit: degrees
  message Pos {
    required double lat = 1;
    required double lon = 2;
  }
  repeated Pos pos = 1;
}

message AbsOrientValueSet {
  required AngleValueSet heading = 1;
  required AngleValueSet roll = 2;
  required AngleValueSet pitch = 3;
}

message BinaryEdgeValueSet {
  repeated bool edges = 1 [packed = true];
}

message ValueSet {
  // shortName is one of:
  //
  // "awa" (apparent wind angle)
  // "aws" (apparent wind speed)
  // "twa" (true wind angle)
  // "tws" (true wind speed)
  // "twdir" (true wind direction)
  // "gpsSpeed" (GPS speed)
  // "gpsBearing" (GPS bearing)
  // "magHdg" (magnetic heading)
  // "watSpeed" (water speed)
  // "watDist" (distance over water)
  // "pos" (GPS position)
  // "dateTime" (GPS date and time (UTC))
  // "targetVmg" (Target VMG)
  // "vmg" (VMG)
  // "orient" (Absolute anemobox orientation)
  // "rudderAngle" (Rudder angle)
  required string shortName = 1;

  // Source is a string describing where the information comes from.
  // examples:
  // NMEA0183/COM1/II
  // NMEA2000/c050a0012fb3245a
  optional string source = 8;
  optional int32 priority = 9;

  // Deprecated, will be empty:
  repeated int64 timestamps = 2 [packed = true];
  
  // Time associated with every value.
  // Unit: milliseconds
  repeated int64 timestampssinceboot = 12 [packed = true];
  
  // Exactly one of the following contains the same number of values contained
  // in timestampssinceboot
  optional AngleValueSet angles = 3;
  optional VelocityValueSet velocity = 4;
  optional LengthValueSet length = 5;
  optional GeoPosValueSet pos = 6;
  optional AbsOrientValueSet orient = 10;
  optional BinaryEdgeValueSet binary = 13;
  optional AngularVelocityValueSet angularvelocity = 14;

  // Time given by an external source, as milliseconds since 1970.1.1
  repeated int64 exttimes = 11 [packed = true];
  
  repeated string text = 7;
}

// Sentences are grouped by sentence-id,
// every sentence id has its own instance
// of the object below.
//
// This class is a bit polymorphic, in the sense that either
// (i) it only stores sentences of 8 bytes or (ii) it only
// stores sentences that are *not* 8 bytes.
message Nmea2000Sentences {
  required int64 sentence_id = 1;
  
  // Delta-coded, in milliseconds (the same instant as the message
  // was tagged with a system time)
  repeated int64 timestampssinceboot = 2 [packed = true];
  
  // Any of these two must be empty.
  repeated bytes oddSizeSentences = 3;
  repeated fixed64 regularSizeSentences = 4;
}

message LogFile {
  repeated ValueSet stream = 1;
  optional string anemobox = 2;
  optional string boatId = 3;
  optional string boatName = 4;

  // those streams do not directly come from the dispatcher.
  // They can contain raw nmea or text logs.
  repeated ValueSet text = 5;
  
  // Stores the number of times the machine recording the data booted. 
  optional int64 bootcount = 6;
  
  repeated Nmea2000Sentences rawNmea2000 = 7;
}
