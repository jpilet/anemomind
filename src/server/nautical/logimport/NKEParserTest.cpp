/*
 *  Created on: 2015
 *      Author: Jonas Ã–stlund <uppfinnarjonas@gmail.com>
 */

#include <gtest/gtest.h>
#include <server/nautical/logimport/NKEParser.h>
#include <iostream>

const unsigned char testdata[] = {
  0x44, 0x61, 0x74, 0x65, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x3b, 0x56, 0x56,
  0x41, 0x5f, 0x4d, 0x65, 0x73, 0x48, 0x52, 0x20, 0x28, 0x4e, 0x64, 0x29,
  0x3b, 0x41, 0x56, 0x41, 0x5f, 0x4d, 0x65, 0x73, 0x48, 0x52, 0x20, 0x28,
  0xef, 0xbf, 0xbd, 0x29, 0x3b, 0x43, 0x61, 0x70, 0x56, 0x72, 0x61, 0x69,
  0x20, 0x20, 0x28, 0xef, 0xbf, 0xbd, 0x56, 0x29, 0x3b, 0x4c, 0x61, 0x74,
  0x69, 0x74, 0x75, 0x64, 0x65, 0x20, 0x28, 0xef, 0xbf, 0xbd, 0x29, 0x3b,
  0x56, 0x69, 0x74, 0x53, 0x75, 0x72, 0x66, 0x50, 0x69, 0x6c, 0x20, 0x28,
  0x4e, 0x64, 0x29, 0x3b, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
  0x65, 0x20, 0x28, 0xef, 0xbf, 0xbd, 0x29, 0x3b, 0x56, 0x69, 0x74, 0x46,
  0x6f, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x20, 0x28, 0x4e, 0x64, 0x29, 0x3b,
  0x43, 0x61, 0x70, 0x46, 0x6f, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x20, 0x28,
  0xef, 0xbf, 0xbd, 0x56, 0x29, 0x3b, 0x0a, 0x31, 0x35, 0x3a, 0x30, 0x30,
  0x3a, 0x30, 0x30, 0x3b, 0x37, 0x2e, 0x30, 0x39, 0x39, 0x39, 0x39, 0x39,
  0x39, 0x30, 0x34, 0x36, 0x33, 0x32, 0x35, 0x36, 0x38, 0x3b, 0x39, 0x36,
  0x2e, 0x35, 0x3b, 0x33, 0x31, 0x34, 0x2e, 0x37, 0x30, 0x30, 0x30, 0x31,
  0x32, 0x32, 0x30, 0x37, 0x30, 0x33, 0x31, 0x32, 0x35, 0x3b, 0x34, 0x37,
  0x2e, 0x34, 0x33, 0x30, 0x30, 0x30, 0x30, 0x33, 0x30, 0x35, 0x31, 0x37,
  0x35, 0x37, 0x38, 0x3b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x30, 0x30,
  0x30, 0x30, 0x30, 0x32, 0x38, 0x30, 0x31, 0x34, 0x31, 0x38, 0x33, 0x3b,
  0x33, 0x2e, 0x32, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x38, 0x36,
  0x31, 0x30, 0x32, 0x32, 0x39, 0x35, 0x3b, 0x30, 0x2e, 0x30, 0x31, 0x30,
  0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x38, 0x30, 0x31, 0x34, 0x31,
  0x38, 0x33, 0x3b, 0x33, 0x32, 0x36, 0x2e, 0x37, 0x39, 0x39, 0x39, 0x38,
  0x37, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x3b, 0x0a, 0x31,
  0x35, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3b, 0x37, 0x2e, 0x30, 0x39,
  0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x34, 0x36, 0x33, 0x32, 0x35, 0x36,
  0x38, 0x3b, 0x39, 0x36, 0x2e, 0x35, 0x3b, 0x33, 0x31, 0x34, 0x2e, 0x37,
  0x30, 0x30, 0x30, 0x31, 0x32, 0x32, 0x30, 0x37, 0x30, 0x33, 0x31, 0x32,
  0x35, 0x3b, 0x34, 0x37, 0x2e, 0x34, 0x33, 0x30, 0x30, 0x30, 0x30, 0x33,
  0x30, 0x35, 0x31, 0x37, 0x35, 0x37, 0x38, 0x3b, 0x30, 0x2e, 0x30, 0x31,
  0x30, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x38, 0x30, 0x31, 0x34,
  0x31, 0x38, 0x33, 0x3b, 0x33, 0x2e, 0x32, 0x32, 0x30, 0x30, 0x30, 0x30,
  0x30, 0x32, 0x38, 0x36, 0x31, 0x30, 0x32, 0x32, 0x39, 0x35, 0x3b, 0x30,
  0x2e, 0x30, 0x31, 0x30, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x38,
  0x30, 0x31, 0x34, 0x31, 0x38, 0x33, 0x3b, 0x33, 0x32, 0x36, 0x2e, 0x37,
  0x39, 0x39, 0x39, 0x38, 0x37, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37,
  0x35, 0x3b, 0x0a, 0x31, 0x35, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3b,
  0x37, 0x2e, 0x30, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x34, 0x36,
  0x33, 0x32, 0x35, 0x36, 0x38, 0x3b, 0x39, 0x36, 0x2e, 0x35, 0x3b, 0x33,
  0x31, 0x34, 0x2e, 0x37, 0x30, 0x30, 0x30, 0x31, 0x32, 0x32, 0x30, 0x37,
  0x30, 0x33, 0x31, 0x32, 0x35, 0x3b, 0x34, 0x37, 0x2e, 0x34, 0x33, 0x30,
  0x30, 0x30, 0x30, 0x33, 0x30, 0x35, 0x31, 0x37, 0x35, 0x37, 0x38, 0x3b,
  0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32,
  0x38, 0x30, 0x31, 0x34, 0x31, 0x38, 0x33, 0x3b, 0x33, 0x2e, 0x32, 0x32,
  0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x38, 0x36, 0x31, 0x30, 0x32, 0x32,
  0x39, 0x35, 0x3b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x30, 0x30, 0x30,
  0x30, 0x30, 0x32, 0x38, 0x30, 0x31, 0x34, 0x31, 0x38, 0x33, 0x3b, 0x33,
  0x32, 0x36, 0x2e, 0x37, 0x39, 0x39, 0x39, 0x38, 0x37, 0x37, 0x39, 0x32,
  0x39, 0x36, 0x38, 0x37, 0x35, 0x3b, 0x0a, 0x0a, 0x00
};

TEST(NKEParserTest, TestNavs) {
  using namespace sail;
  using namespace sail::NavCompat;

  std::stringstream ss;
  std::string filename = "28_11_2014_15_00_00.csv";
  ss << testdata;

  NKEParser parser;

  NKEData data = parser.load(filename, ss);

  EXPECT_EQ(3, data.rows());

  NavDataset navs = parser.makeNavs(data);
  EXPECT_EQ(getNavSize(navs), 3);

  EXPECT_NEAR(327, getLast(navs).gpsBearing().degrees(), 2.0);

  TimeStamp time = TimeStamp::UTC(2014, 11, 28, 15, 0, 0);
  Duration<double> dif = time - getFirst(navs).time();
  EXPECT_NEAR(dif.seconds(), 0.0, 3.0);
}


