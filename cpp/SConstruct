import os
import copy
env = Environment(ENV = {'PATH' : os.environ['PATH'],
                         'HOME' : os.environ['HOME']})
Export('env')

# We should identify the platform here
# and provide appropriate flags.
env.AppendUnique(CPPPATH = ['/usr/local/include'])
env.AppendUnique(LIBPATH = ['/usr/local/lib'])
env.AppendUnique(CPPPATH = ['/usr/include'])
env.AppendUnique(LIBPATH = ['/usr/lib'])

env.AppendUnique(CPPFLAGS = ['-g3', '-O0'])

# http://arma.sourceforge.net/
if os.environ['HOME'].find('leto'):
    env.AppendUnique(LIBS = ['armadillo', 'lapack'])
else:
    env.AppendUnique(LIBS = ['armadillo', 'lapack_atlas'])

# http://code.google.com/p/ceres-solver/
# env.AppendUnique(LIBS = ['ceres'])

env.AppendUnique(CPPFLAGS = ['-std=c++11'])

# ADOL-C: http://www.coin-or.org/projects/ADOL-C.xml
adolcbase = os.environ['HOME'] + '/adolc_base/';
env.AppendUnique(CPPPATH = [adolcbase + 'include'])
env.AppendUnique(LIBPATH = [adolcbase + 'lib64'])
env.AppendUnique(LIBS = ['adolc'])

env.AppendUnique(LIBS = ['gtest', 'gtest_main'])
env.AppendUnique(LIBPATH = ['/usr/lib/gtest']) # a link to gtest-1.7.0/lib/.libs
env.AppendUnique(LIBPATH = ['/Users/leto/Documents/sailing_projects/sailsmart/cpp/build/gtest'])

# For Julien's laptop
env.AppendUnique(CPPPATH = ['build/gtest/include'])
env.AppendUnique(CPPPATH = ['/Users/leto/Documents/sailing_projects/sailsmart/cpp/build/gtest/include'])
env.AppendUnique(CPPPATH = ['/opt/local/include'])
env.AppendUnique(LIBPATH = ['/opt/local/lib'])
env.AppendUnique(CPPPATH = ['/Users/leto/Documents/sailing_projects/sailsmart/cpp/build/adolc/include'])
env.AppendUnique(LIBPATH = ['/Users/leto/Documents/sailing_projects/sailsmart/cpp/build/adolc/lib64'])

# Put the object code in a different location than the source code.
# http://www.scons.org/doc/2.0.1/HTML/scons-user/x3444.html
VariantDir('build', 'src', duplicate = 0)


##################### MAIN PROGRAM #######################
main = env.Program('build/main', ['src/examples/examples_.cpp', SConscript('build/SConscript')])

##################### TESTING ############################
with_test    = 1		# Flag to build test
with_runtest = 1		# Flag to run tests

if with_test:
	test = env.Program('build/test', SConscript('build/SConscriptTest'))	
	if with_runtest:
		runtest = env.Command(target = "build/testlog.txt",
							  source = "build/test",
                			  action = ["build/test > $TARGET",
                			  			"cat $TARGET"])
		Depends(runtest, test)
		AlwaysBuild(runtest)
		
