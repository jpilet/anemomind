#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\begin_modules
customHeadersFooters
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Center Header
CONFIDENTIAL - Do not distribute without written approval
\end_layout

\begin_layout Right Header

\end_layout

\begin_layout Left Header

\end_layout

\begin_layout Title
Anemomind solution description
\end_layout

\begin_layout Author
Julien Pilet and Jonas Ã–stlund
\end_layout

\begin_layout Section
System Overview
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{fancy}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Anemomind system is an attempt to improve the information that can be
 obtained from sensors placed on a sailing boat.
 More specifically, the system has the following goals: to improve true
 wind estimation through automatic calibration, to provide real-time boat
 performance information through automatic target speed computation, and
 to offer a fast and complete visualization system of all recorded data.
\end_layout

\begin_layout Standard
Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:System-diagram"

\end_inset

 describes the general system architecture.
 On the boat, transducers (typically GPS, anemometer, water speed sensor,
 and compass) provide information to a data bus, typically NMEA0183 or NMEA2000.
 A light processing unit receives the data and stores it in a temporary
 buffer.
 When enough data has been collected and when a connection to the heavy
 processing unit can be established, recorded data is sent to the heavy
 processing unit.
 This unit processes the data and produce calibration parameters that allow
 a better true wind estimation.
 It also produces target speed tables for the boat.
 The calibration parameters and the target speed tables are sent back to
 the light processing unit.
 The light processing unit can then exploit the calibration parameters and
 the target speed tables to compute in real-time true wind and current according
 to the calibration parameters, and boat performance, according to the target
 speed tables.
 This computed information can be displayed in real-time to help sailors
 in their navigation tasks.
\end_layout

\begin_layout Standard
The heavy processing unit also has a data visualization component.
 The whole boat history is served to visualization clients.
 That makes it possible for crew members to visualize, analyse, and discuss
 their past navigations.
\end_layout

\begin_layout Standard
The process is split into two computating units, because the heavy unit
 might not be convenient to use onboard.
 If constraints such as energy or volume makes it impossible for the heavy
 processing unit to be installed on board, this heavy unit can be hosted
 on shore, in a datacenter.
 The light and heavy units can then communicate through a phone network,
 wifi, or satellite.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename system.dia
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:System-diagram"

\end_inset

System diagram
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename information.dia
	width 95text%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Information-flow-diagram"

\end_inset

Information flow diagram
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Data Aquisition and Transfer
\end_layout

\begin_layout Section
Data Processing
\end_layout

\begin_layout Standard
Recorded sensor data for a particular boat from any number of races is stored
 as NMEA sentences in text files.
 The first step in the processing amounts to load this data for a boat and
 group measurements into tuples.
 We call such a tuple a nav.
 A nav groups a time stamp together with sensor values at that time stamp.
 Once all navs of interest have been loaded, they are sorted in ascending
 order by their time stamp.
\end_layout

\begin_layout Subsection
Semantic segmentation
\end_layout

\begin_layout Standard
Given a discrete set 
\begin_inset ERT
status open

\begin_layout Plain Layout

$L$
\end_layout

\end_inset

 of labels, the semantic segmentation assigns a label from the set to every
 nav in a sequence of 
\begin_inset ERT
status open

\begin_layout Plain Layout

$N$
\end_layout

\end_inset

 navs sorted by their time stamp.
 For instance, a set of such labels could be 
\begin_inset ERT
status open

\begin_layout Plain Layout

$L_0 = {
\backslash
textrm{Downwind}, 
\backslash
textrm{Upwind}}$
\end_layout

\end_inset

 to denote if the boat, for a particular nav, is sailing upwind or downwind.
 The set of labels together with the rule to assign those labels to each
 nav in a sequence is called a grammar.
 The assignment of labels to navs in a sequence is the solution of an optimizati
on problem where an objective function 
\begin_inset ERT
status open

\begin_layout Plain Layout

$f:L^N 
\backslash
rightarrow 
\backslash
mathbf{R}$
\end_layout

\end_inset

 is minimized w.r.t.
 to a vector of states.
 The objective function has the form 
\begin_inset ERT
status open

\begin_layout Plain Layout

$f(I) = 
\backslash
sum_{n = 1}^{N} C_{
\backslash
textrm{state}}(n, I_n) + 
\backslash
sum_{i = 1}^{N-1} C_{
\backslash
textrm{transition}}(n, I_n, I_{n+1})$
\end_layout

\end_inset

.
 The function 
\begin_inset ERT
status open

\begin_layout Plain Layout

$C_{
\backslash
textrm{state}}(n, I_n)$
\end_layout

\end_inset

 is defined by the grammar from the sequence of navs and is the cost of
 assigning label 
\begin_inset ERT
status open

\begin_layout Plain Layout

$I_n$
\end_layout

\end_inset

 to the nav with index 
\begin_inset ERT
status open

\begin_layout Plain Layout

$n$
\end_layout

\end_inset

.
 The function 
\begin_inset ERT
status open

\begin_layout Plain Layout

$C_{
\backslash
textrm{transition}}(n, I_n, I_{n+1})$
\end_layout

\end_inset

 is defined by the grammar from the sequence of navs and is the cost of
 jointly assigning label 
\begin_inset ERT
status open

\begin_layout Plain Layout

$I_n$
\end_layout

\end_inset

 to nav with index 
\begin_inset ERT
status open

\begin_layout Plain Layout

$n$
\end_layout

\end_inset

 and label 
\begin_inset ERT
status open

\begin_layout Plain Layout

$I_{n+1}$
\end_layout

\end_inset

 to nav with index 
\begin_inset ERT
status open

\begin_layout Plain Layout

$n+1$
\end_layout

\end_inset

.
 This optimization problem has the same structure as a hidden markov model
 (HMM) and is solved using the dynamic programming algorithm.
\end_layout

\begin_layout Subsection
Calibration
\end_layout

\begin_layout Standard
Calibration is the process of computing parameters that determine how the
 raw measurements from sensors on the boat are mapped to values that represent
 the true quantities being measured.
\end_layout

\begin_layout Standard
A maneuver is a rapid transition from one sail trim and boat course to a
 different sail trim and course.
 For properly calibrated instruments and assuming consta
\end_layout

\begin_layout Subsection
Target speed extraction
\end_layout

\begin_layout Subsection
Data compilation for fast visualization
\end_layout

\begin_layout Section
Real-time Data Processing and Visualization
\end_layout

\begin_layout Section
Post-Navigation Data Visualization
\end_layout

\end_body
\end_document
